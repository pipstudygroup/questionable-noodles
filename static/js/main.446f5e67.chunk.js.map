{"version":3,"sources":["services/people.js","services/resturants.js","components/AttendanceList/AttendanceList.js","components/WhereToLunch/WhereToLunch.js","pages/LunchLotto/index.js","pages/LunchLotto/LunchLotto.js","components/Profile/Profile.js","components/NavBar/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["peopleList","restaurants","AttendanceList","props","people","setPeople","map","person","index","name","type","onChange","tempPeople","isAttending","updateAttendance","checked","hates","join","WhereToLunch","lunchLotto","currentLunchLocation","onClick","style","backgroundColor","color","LunchLotto","useState","setCurrentLunchLocation","peopleManifest","removeHatedRestaurants","eligibleRestaurants","filter","restaurant","reduce","isEligible","includes","getRestaurantsHatedByAbsentees","restaurantsHatedByAbsentees","concat","absenteeHateForCurrentRestaurant","getRestaurantsLovedByAttendees","restaurantsLovedByAttendees","attendeeLoveForCurrentRestaurant","loves","getRestaurantsLovedByAbsentees","restaurantsLovedByAbsentees","absenteeLoveForCurrentRestaurant","console","log","forEach","inTheRunning","current","loved","length","i","push","randomIndex","Math","floor","random","Profile","search","URLSearchParams","useLocation","get","NavBar","to","App","className","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.446f5e67.chunk.js","sourcesContent":["import peopleList from './mockData/people';\n\n// Code To Add to JSON\n\n// Code to Remove from JSON\n\n// Code to Edit JSON\n\nexport default peopleList; \n","import restaurants from './mockData/restaurants.json'\n\n// Code To Add to JSON\n\n// Code to Remove from JSON\n\n// Code to Edit JSON\n\nexport default restaurants; \n","import React from 'react';\n\nconst AttendanceList = (props) => {\n    const { people, setPeople } = props;\n    \n    const updateAttendance = (index) => {\n        let tempPeople = people;\n        tempPeople[index].isAttending = !tempPeople[index].isAttending;\n        setPeople([...tempPeople]);\n    }\n\n    return (\n        <>\n            {\n                people.map(function (person, index) {\n                    return <div>\n                        {person.name} <input type=\"checkbox\" onChange={() => { updateAttendance(index) }} checked={person.isAttending ? true : \"\"}></input>\n                        {person.isAttending ? ` Hates: ${person.hates.join(', ')}` : ''}\n                    </div>\n                })\n            }\n        </>\n    )\n}\n\nexport default AttendanceList;\n","import React from 'react';\n\nconst WhereToLunch = (props) => {\n\n    const {\n        lunchLotto,\n        currentLunchLocation\n    } = props;\n\n    return (\n        <>\n            <h2>\n                {currentLunchLocation}\n            </h2>\n            <button onClick={() => { lunchLotto() }} style={{ backgroundColor: 'purple', color: 'white' }}>Where to Lunch?</button>\n        </>\n    )\n}\n\nexport default WhereToLunch;\n","import LunchLotto from './LunchLotto';\n\nexport default LunchLotto;","import React, { useState } from 'react';\nimport peopleManifest from '../../services/people';\nimport restaurants from '../../services/resturants';\nimport AttendanceList from '../../components/AttendanceList/AttendanceList';\nimport WhereToLunch from '../../components/WhereToLunch/WhereToLunch';\nimport './LunchLotto.css';\n\nconst LunchLotto = () => {\n\n    const [currentLunchLocation, setCurrentLunchLocation] = useState('Click the Button');\n    const [people, setPeople] = useState(peopleManifest);\n    \n    const lunchLotto = () => {\n        let eligibleRestaurants = removeHatedRestaurants(restaurants);\n        let restaurantsHatedByAbsentees = getRestaurantsHatedByAbsentees(eligibleRestaurants);\n        let restaurantsLovedByAbsentees = getRestaurantsLovedByAbsentees(eligibleRestaurants);\n        let restaurantsLovedByAttendees = getRestaurantsLovedByAttendees(eligibleRestaurants);\n        console.log('hated by absentees');\n        console.log(restaurantsHatedByAbsentees);\n        console.log('loved by absentees');\n        console.log(restaurantsLovedByAbsentees);\n        console.log('loved by attendees');\n        console.log(restaurantsLovedByAttendees);\n\n        eligibleRestaurants = eligibleRestaurants.concat(restaurantsHatedByAbsentees);\n        eligibleRestaurants = eligibleRestaurants.concat(restaurantsLovedByAttendees).concat(restaurantsLovedByAttendees).concat(restaurantsLovedByAttendees);\n        console.log('eligibleRestaurants')\n        console.log(eligibleRestaurants);\n\n        // use restaurants loved by absentees to narrow down choices\n        removeHatedRestaurants(restaurants).forEach(function (restaurant) {\n            let inTheRunning = eligibleRestaurants.filter(function (current) {\n                return current === restaurant;\n            })\n            let loved = restaurantsLovedByAbsentees.filter(function (current) {\n                return current === restaurant;\n            })\n            eligibleRestaurants = eligibleRestaurants.filter(function (current) {\n                return current !== restaurant;\n            })\n            if (inTheRunning.length > loved.length) {\n                for (let i = 0; i < inTheRunning.length - loved.length; i++) {\n                    eligibleRestaurants.push(restaurant)\n                }\n            } else {\n                eligibleRestaurants.push(restaurant)\n            }\n        });\n        console.log('eligibleRestaurants')\n        console.log(eligibleRestaurants);\n        let randomIndex = Math.floor(Math.random() * eligibleRestaurants.length);\n        setCurrentLunchLocation(eligibleRestaurants[randomIndex]);\n    }\n    const removeHatedRestaurants = (eligibleRestaurants) => {\n        return eligibleRestaurants.filter(function (restaurant) {\n            return people.filter(function (person) {\n                return person.isAttending;\n            }).reduce(function (isEligible, person) {\n                return isEligible && !person.hates.includes(restaurant);\n            }, true);\n        })\n    }\n\n    const getRestaurantsHatedByAbsentees = (eligibleRestaurants) => {\n        return eligibleRestaurants.reduce(function (restaurantsHatedByAbsentees, restaurant) {\n            return restaurantsHatedByAbsentees.concat(people.filter(function (person) {\n                return !person.isAttending;\n            }).reduce(function (absenteeHateForCurrentRestaurant, person) {\n                return person.hates.includes(restaurant) ? absenteeHateForCurrentRestaurant.concat(restaurant) : absenteeHateForCurrentRestaurant;\n            }, []));\n        }, [])\n    }\n\n    const getRestaurantsLovedByAttendees = (eligibleRestaurants) => {\n        return eligibleRestaurants.reduce(function (restaurantsLovedByAttendees, restaurant) {\n            return restaurantsLovedByAttendees.concat(people.filter(function (person) {\n                return person.isAttending;\n            }).reduce(function (attendeeLoveForCurrentRestaurant, person) {\n                return person.loves.includes(restaurant) ? attendeeLoveForCurrentRestaurant.concat(restaurant) : attendeeLoveForCurrentRestaurant;\n            }, []));\n        }, [])\n    }\n\n    const getRestaurantsLovedByAbsentees = (eligibleRestaurants) => {\n        return eligibleRestaurants.reduce(function (restaurantsLovedByAbsentees, restaurant) {\n            return restaurantsLovedByAbsentees.concat(people.filter(function (person) {\n                return !person.isAttending;\n            }).reduce(function (absenteeLoveForCurrentRestaurant, person) {\n                return person.loves.includes(restaurant) ? absenteeLoveForCurrentRestaurant.concat(restaurant) : absenteeLoveForCurrentRestaurant;\n            }, []));\n        }, [])\n    }\n\n    return (\n        <>\n            <WhereToLunch currentLunchLocation={currentLunchLocation} lunchLotto={lunchLotto}/>\n            <AttendanceList people={people} setPeople={setPeople} />\n        </>\n    );\n}\n\nexport default LunchLotto;","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst useSearch = () => {\n    return new URLSearchParams(useLocation().search);\n}\n\nexport const Profile = (props) => {\n    const search = useSearch();\n    return (\n        <>\n            <div>I am a Profile Page! HI</div>\n            <div>{search.get('name')}</div>\n        </>\n    )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const NavBar = () => {\n    return (\n        <div>\n            <Link to='/' style={{'margin-right':'10px'}}>Home</Link>\n            <Link to='/profile'>Profile</Link>\n        </div>\n    );\n}","import React, { Fragment, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport LunchLotto from './pages/LunchLotto';\nimport { Profile } from './components/Profile/Profile';\nimport { NavBar } from './components/NavBar';\nconst App = (props) => {\n  console.log(props);\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar />\n        <Switch>\n          <Route path='/' exact component={LunchLotto} />\n          <Route path='/profile' component={Profile} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}